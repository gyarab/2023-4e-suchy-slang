// A minimal brainfuck interpreter

// POSIX system call declarations
extern fn open (&char, i32) -> i32;
extern fn close (i32) -> i32;
extern fn lseek (i32, i64, i32) -> i64;
extern fn mmap (i64, i64, i32, i32, i32, i64) -> &char;
extern fn munmap (&char, i64) -> i32;
extern fn printf (&char, ...) -> i32;
extern fn getchar () -> i32;
extern fn putchar (i32) -> i32;
extern fn malloc (i64) -> &char;
extern fn free (&char) -> &char;

stream main (i32, &&char) -> i32 {
    let args = catch in;
    let fd = open(args.1[1 as i32], 0 as i32);
    let size = lseek(fd, 0, 2 as i32) + 1; // seek from end
    lseek(fd, 0, 0 as i32); // return to beginning

    let code = mmap(0, size, 1 as i32, 2 as i32, fd, 0);
    let codeptr = 0;

    let tape = malloc(1024*1024) as &i64; // 1 MiB
    let headptr = 0 as i32;
    tape[headptr] = 0;
    let initptr = headptr; 
    let tapeendptr = (1024 * 1024 / 8 - 1) as i32;

    while (codeptr < size) {
        // make sure the memory is initialized
        if (headptr > initptr) {
            tape[headptr] = 0;
            initptr = headptr;
        }
        if (code[codeptr as i32] == '>') {
            if (headptr == tapeendptr) {
                printf("tried to go outside of tape >\n");
                0 as i32 | out;
            }
            headptr = headptr + 1 as i32;
        } else if (code[codeptr as i32] == '<') {
            if (headptr == 0 as i32) {
                printf("tried to go outside of tape <\n");
                0 as i32 | out;
            }
            headptr = headptr - 1 as i32;
        } else if (code[codeptr as i32] == '+') {
            tape[headptr] = tape[headptr] + 1;
        } else if (code[codeptr as i32] == '-') {
            tape[headptr] = tape[headptr] - 1;
        } else if (code[codeptr as i32] == '[' && tape[headptr] == 0) {
            let stack = 1;
            while (stack != 0 && codeptr < size - 1) {
                codeptr = codeptr + 1;
                if (code[codeptr as i32] == '[') {
                    stack = stack + 1;
                } else if (code[codeptr as i32] == ']') {
                    stack = stack - 1;
                }
            }
            if (stack > 0) {
                printf("invalid brackets");
                0 as i32 | out;
            }
        } else if (code[codeptr as i32] == ']' && tape[headptr] != 0) {
            let stack = 1;
            while (stack != 0 && codeptr > 1) {
                codeptr = codeptr - 1;
                if (code[codeptr as i32]== ']') {
                    stack = stack + 1;
                } else if (code[codeptr as i32] == '[') {
                    stack = stack - 1;
                }
            }
            if (stack > 0) {
                printf("invalid brackets");
                0 as i32 | out;
            }
        } else if (code[codeptr as i32] == '.') {
            putchar(tape[headptr] as i32);
        } else if (code[codeptr as i32] == ',') {
            tape[headptr] = getchar() as i64;
        }

        codeptr = codeptr + 1;
    }

    munmap(code, size);
    close(fd);
    free(tape);

    0 as i32 | out;
}
